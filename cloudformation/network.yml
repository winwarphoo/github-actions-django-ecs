AWSTemplateFormatVersion: 2010-09-09
Description: "GitHub Actions CI/CD"

Parameters:
  MyEnvName:
    Type: String
    Default: "Phoo0914"
  AppName:
    Type: String
    Default: "django" 
  ECSContainerImage:
    Type: String
    Default: 458247080796.dkr.ecr.ap-southeast-1.amazonaws.com/phoo0914-django_app

Resources: 

  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub "${MyEnvName} VPC"
  
  # ------------------------------------------------------------#
  #  Internet Gateway
  # ------------------------------------------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${MyEnvName} InternetGateway"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  #  Route Table (Public)
  # ------------------------------------------------------------#
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${MyEnvName} RouteTable"
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # ------------------------------------------------------------#
  #  Public Subnet A
  # ------------------------------------------------------------#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${MyEnvName} PublicSubnetA"
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable  

  # ------------------------------------------------------------#
  #  Public Subnet C
  # ------------------------------------------------------------#
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${MyEnvName} PublicSubnetC"
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref RouteTable  

  # ------------------------------------------------------------#
  #  NAT Gateway A
  # ------------------------------------------------------------#
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId: !GetAtt EIPForNATGatewayA.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} NatGatewayA"

  EIPForNATGatewayA:
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: vpc

  # ------------------------------------------------------------#
  #  NAT Gateway C
  # ------------------------------------------------------------#
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetC
      AllocationId: !GetAtt EIPForNATGatewayC.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} NatGatewayC"

  EIPForNATGatewayC:
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: vpc

  # ------------------------------------------------------------#
  #  Private Subnet A Route Table
  # ------------------------------------------------------------#
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - NatGatewayA
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} PrivateSubnetARouteTable"
    
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  # ------------------------------------------------------------#
  #  Private Subnet C Route Table
  # ------------------------------------------------------------#
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - NatGatewayC
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} PrivateSubnetCRouteTable"
    
  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC

  # ------------------------------------------------------------#
  #  Private Sunbet A
  # ------------------------------------------------------------#
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} PrivateSubnetA"
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA

  # ------------------------------------------------------------#
  #  Private Sunbet C
  # ------------------------------------------------------------#
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} PrivateSubnetC"
  
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      SubnetId: !Ref PrivateSubnetC

  # ------------------------------------------------------------#
  # ALB Security Group
  # ------------------------------------------------------------#
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from Internet
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} ALBSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # ------------------------------------------------------------#
  # ECS Security Group
  # ------------------------------------------------------------#
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName} ECSSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # ------------------------------------------------------------#
  # ECS Task Execution Role
  # ------------------------------------------------------------#
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${MyEnvName}-ECSTaskExecutionRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  # ------------------------------------------------------------#
  # ECS Cluster
  # ------------------------------------------------------------#
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${MyEnvName}-${AppName}-cluster" 

  # ------------------------------------------------------------#
  # ECS TaskDefination
  # ------------------------------------------------------------#
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 256
      ExecutionRoleArn: !Sub "${MyEnvName}-ECSTaskExecutionRole"
      Family: !Join ['', [!Ref 'AWS::StackName', -django-app]]
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub "${MyEnvName}-${AppName}-container"
          Cpu: 128
          Essential: true
          Image: !Ref ECSContainerImage
          Memory: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: django-app
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80

  # ------------------------------------------------------------#
  # ECS Service
  # ------------------------------------------------------------#
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
          ContainerName: !Sub "${MyEnvName}-${AppName}-container"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetC
      ServiceName: !Sub "${MyEnvName}-${AppName}-service"
      TaskDefinition: !Ref ECSTaskDefinition

  # ------------------------------------------------------------#
  # ALB
  # ------------------------------------------------------------#
  ApplicationLoadBalancer:
    Type : AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${MyEnvName}-ApplicationLoadBalancer"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName}-ApplicationLoadBalancer"

  # ------------------------------------------------------------#
  # Target Group
  # ------------------------------------------------------------#
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${MyEnvName}-TargetGroup"
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Sub "${MyEnvName}-TargetGroup"

  # ------------------------------------------------------------#
  # ALB Listener
  # ------------------------------------------------------------#
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Port: 80
      Protocol: HTTP

  # ------------------------------------------------------------#
  # CloudWatch Log Group
  # ------------------------------------------------------------#
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

Outputs:
  VPC1:
    Value: !Ref MyVPC
    Export: 
      Name: !Sub "${MyEnvName}-VPCName"
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${MyEnvName}-PublicSubnetA"
  PublicSubnetC:
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${MyEnvName}-PublicSubnetC"
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${MyEnvName}-PrivateSubnetA"
  PrivateSubnetC:
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub "${MyEnvName}-PrivateSubnetC"
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export: 
      Name: !Sub "${MyEnvName}-ALBSecurityGroup"
  
  ECSSecurityGroup:
    Value: !Ref ECSSecurityGroup
    Export: 
      Name: !Sub "${MyEnvName}-ECSSecurityGroup"

  ECSTaskExecutionRole:
    Value: !Ref ECSTaskExecutionRole
    Export: 
      Name: !Sub "${MyEnvName}-ECSTaskExecutionRole"
